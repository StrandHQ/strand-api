[
{
  "model": "topics.tag",
  "pk": 1,
  "fields": {
    "created": "2018-02-08T16:11:12.349Z",
    "modified": "2018-02-08T16:11:12.350Z",
    "name": "python"
  }
},
{
  "model": "topics.tag",
  "pk": 2,
  "fields": {
    "created": "2018-02-08T16:11:12.372Z",
    "modified": "2018-02-08T16:11:12.372Z",
    "name": "apache"
  }
},
{
  "model": "topics.tag",
  "pk": 3,
  "fields": {
    "created": "2018-02-08T16:12:31.579Z",
    "modified": "2018-02-08T16:12:31.579Z",
    "name": "pandas."
  }
},
{
  "model": "topics.tag",
  "pk": 4,
  "fields": {
    "created": "2018-02-08T16:12:31.857Z",
    "modified": "2018-02-08T16:12:31.857Z",
    "name": "postgrsql"
  }
},
{
  "model": "topics.tag",
  "pk": 5,
  "fields": {
    "created": "2018-02-08T16:12:33.645Z",
    "modified": "2018-02-08T16:12:33.645Z",
    "name": "iphone"
  }
},
{
  "model": "topics.tag",
  "pk": 6,
  "fields": {
    "created": "2018-02-08T16:12:33.833Z",
    "modified": "2018-02-08T16:12:33.833Z",
    "name": "requests"
  }
},
{
  "model": "topics.tag",
  "pk": 7,
  "fields": {
    "created": "2018-02-08T16:12:33.837Z",
    "modified": "2018-02-08T16:12:33.837Z",
    "name": "blockchain-dns"
  }
},
{
  "model": "topics.tag",
  "pk": 8,
  "fields": {
    "created": "2018-02-08T16:12:34.087Z",
    "modified": "2018-02-08T16:12:34.087Z",
    "name": "react"
  }
},
{
  "model": "topics.tag",
  "pk": 9,
  "fields": {
    "created": "2018-02-08T16:12:34.108Z",
    "modified": "2018-02-08T16:12:34.108Z",
    "name": "material-ui"
  }
},
{
  "model": "topics.tag",
  "pk": 10,
  "fields": {
    "created": "2018-02-08T16:12:34.377Z",
    "modified": "2018-02-08T16:12:34.377Z",
    "name": "circleci"
  }
},
{
  "model": "topics.tag",
  "pk": 11,
  "fields": {
    "created": "2018-02-08T16:12:34.381Z",
    "modified": "2018-02-08T16:12:34.381Z",
    "name": "ecs"
  }
},
{
  "model": "topics.tag",
  "pk": 12,
  "fields": {
    "created": "2018-02-08T16:12:34.384Z",
    "modified": "2018-02-08T16:12:34.384Z",
    "name": "cd"
  }
},
{
  "model": "topics.tag",
  "pk": 13,
  "fields": {
    "created": "2018-02-08T16:12:34.646Z",
    "modified": "2018-02-08T16:12:34.647Z",
    "name": "event-handler"
  }
},
{
  "model": "topics.tag",
  "pk": 14,
  "fields": {
    "created": "2018-02-08T16:12:34.651Z",
    "modified": "2018-02-08T16:12:34.651Z",
    "name": "javascript"
  }
},
{
  "model": "topics.tag",
  "pk": 15,
  "fields": {
    "created": "2018-02-08T16:12:34.656Z",
    "modified": "2018-02-08T16:12:34.656Z",
    "name": "js"
  }
},
{
  "model": "topics.tag",
  "pk": 16,
  "fields": {
    "created": "2018-02-08T16:12:34.659Z",
    "modified": "2018-02-08T16:12:34.660Z",
    "name": "css"
  }
},
{
  "model": "topics.tag",
  "pk": 17,
  "fields": {
    "created": "2018-02-08T16:12:34.663Z",
    "modified": "2018-02-08T16:12:34.663Z",
    "name": "html"
  }
},
{
  "model": "topics.tag",
  "pk": 18,
  "fields": {
    "created": "2018-02-08T16:12:34.956Z",
    "modified": "2018-02-08T16:12:34.956Z",
    "name": "svg"
  }
},
{
  "model": "topics.tag",
  "pk": 19,
  "fields": {
    "created": "2018-02-08T16:12:34.960Z",
    "modified": "2018-02-08T16:12:34.960Z",
    "name": "react-scripts"
  }
},
{
  "model": "topics.tag",
  "pk": 20,
  "fields": {
    "created": "2018-02-08T16:12:35.162Z",
    "modified": "2018-02-08T16:12:35.162Z",
    "name": "chrome"
  }
},
{
  "model": "topics.tag",
  "pk": 21,
  "fields": {
    "created": "2018-02-08T16:12:35.167Z",
    "modified": "2018-02-08T16:12:35.167Z",
    "name": "proxy"
  }
},
{
  "model": "topics.tag",
  "pk": 22,
  "fields": {
    "created": "2018-02-08T16:12:35.170Z",
    "modified": "2018-02-08T16:12:35.171Z",
    "name": "ssl"
  }
},
{
  "model": "topics.tag",
  "pk": 23,
  "fields": {
    "created": "2018-02-08T16:12:35.174Z",
    "modified": "2018-02-08T16:12:35.174Z",
    "name": "tls-v1.2"
  }
},
{
  "model": "topics.tag",
  "pk": 24,
  "fields": {
    "created": "2018-02-08T16:12:35.482Z",
    "modified": "2018-02-08T16:12:35.482Z",
    "name": "pytest"
  }
},
{
  "model": "topics.tag",
  "pk": 25,
  "fields": {
    "created": "2018-02-08T16:12:35.486Z",
    "modified": "2018-02-08T16:12:35.486Z",
    "name": "peewee"
  }
},
{
  "model": "topics.tag",
  "pk": 26,
  "fields": {
    "created": "2018-02-08T16:12:35.490Z",
    "modified": "2018-02-08T16:12:35.490Z",
    "name": "sqlite"
  }
},
{
  "model": "topics.tag",
  "pk": 27,
  "fields": {
    "created": "2018-02-08T16:12:36.239Z",
    "modified": "2018-02-08T16:12:36.239Z",
    "name": "slack"
  }
},
{
  "model": "topics.tag",
  "pk": 28,
  "fields": {
    "created": "2018-02-08T16:12:36.660Z",
    "modified": "2018-02-08T16:12:36.660Z",
    "name": "dom"
  }
},
{
  "model": "topics.tag",
  "pk": 29,
  "fields": {
    "created": "2018-02-08T16:12:36.999Z",
    "modified": "2018-02-08T16:12:36.999Z",
    "name": "ddd"
  }
},
{
  "model": "topics.tag",
  "pk": 30,
  "fields": {
    "created": "2018-02-08T16:12:37.020Z",
    "modified": "2018-02-08T16:12:37.020Z",
    "name": "design"
  }
},
{
  "model": "topics.tag",
  "pk": 31,
  "fields": {
    "created": "2018-02-08T16:12:37.293Z",
    "modified": "2018-02-08T16:12:37.293Z",
    "name": "form"
  }
},
{
  "model": "topics.tag",
  "pk": 32,
  "fields": {
    "created": "2018-02-08T16:12:37.329Z",
    "modified": "2018-02-08T16:12:37.329Z",
    "name": "wtforms"
  }
},
{
  "model": "topics.tag",
  "pk": 33,
  "fields": {
    "created": "2018-02-08T16:12:38.159Z",
    "modified": "2018-02-08T16:12:38.160Z",
    "name": "delegation"
  }
},
{
  "model": "topics.tag",
  "pk": 34,
  "fields": {
    "created": "2018-02-08T16:12:38.196Z",
    "modified": "2018-02-08T16:12:38.196Z",
    "name": "event"
  }
},
{
  "model": "topics.tag",
  "pk": 35,
  "fields": {
    "created": "2018-02-08T16:12:38.684Z",
    "modified": "2018-02-08T16:12:38.684Z",
    "name": "mysql"
  }
},
{
  "model": "topics.tag",
  "pk": 36,
  "fields": {
    "created": "2018-02-08T16:12:38.690Z",
    "modified": "2018-02-08T16:12:38.690Z",
    "name": "pandas"
  }
},
{
  "model": "topics.tag",
  "pk": 37,
  "fields": {
    "created": "2018-02-08T16:12:39.926Z",
    "modified": "2018-02-08T16:12:39.926Z",
    "name": "vanilla"
  }
},
{
  "model": "topics.tag",
  "pk": 38,
  "fields": {
    "created": "2018-02-08T16:12:39.930Z",
    "modified": "2018-02-08T16:12:39.930Z",
    "name": "live"
  }
},
{
  "model": "topics.tag",
  "pk": 39,
  "fields": {
    "created": "2018-02-08T16:12:39.933Z",
    "modified": "2018-02-08T16:12:39.933Z",
    "name": "collection"
  }
},
{
  "model": "topics.tag",
  "pk": 40,
  "fields": {
    "created": "2018-02-08T16:12:40.930Z",
    "modified": "2018-02-08T16:12:40.930Z",
    "name": "flask"
  }
},
{
  "model": "topics.tag",
  "pk": 41,
  "fields": {
    "created": "2018-02-08T16:12:40.940Z",
    "modified": "2018-02-08T16:12:40.940Z",
    "name": "flask_restful"
  }
},
{
  "model": "topics.tag",
  "pk": 42,
  "fields": {
    "created": "2018-02-08T16:12:41.248Z",
    "modified": "2018-02-08T16:12:41.248Z",
    "name": "delegate"
  }
},
{
  "model": "topics.tag",
  "pk": 43,
  "fields": {
    "created": "2018-02-08T16:12:41.251Z",
    "modified": "2018-02-08T16:12:41.251Z",
    "name": "event-listener"
  }
},
{
  "model": "topics.tag",
  "pk": 44,
  "fields": {
    "created": "2018-02-08T16:12:41.510Z",
    "modified": "2018-02-08T16:12:41.510Z",
    "name": "c#"
  }
},
{
  "model": "topics.tag",
  "pk": 45,
  "fields": {
    "created": "2018-02-08T16:12:44.849Z",
    "modified": "2018-02-08T16:12:44.849Z",
    "name": "tkinter"
  }
},
{
  "model": "topics.tag",
  "pk": 46,
  "fields": {
    "created": "2018-02-08T16:12:46.159Z",
    "modified": "2018-02-08T16:12:46.159Z",
    "name": "wordpress"
  }
},
{
  "model": "topics.tag",
  "pk": 47,
  "fields": {
    "created": "2018-02-08T16:12:46.186Z",
    "modified": "2018-02-08T16:12:46.187Z",
    "name": "wp"
  }
},
{
  "model": "topics.tag",
  "pk": 48,
  "fields": {
    "created": "2018-02-08T16:12:46.213Z",
    "modified": "2018-02-08T16:12:46.213Z",
    "name": "php"
  }
},
{
  "model": "topics.tag",
  "pk": 49,
  "fields": {
    "created": "2018-02-08T16:12:46.843Z",
    "modified": "2018-02-08T16:12:46.843Z",
    "name": "plotly"
  }
},
{
  "model": "topics.tag",
  "pk": 50,
  "fields": {
    "created": "2018-02-08T16:12:46.854Z",
    "modified": "2018-02-08T16:12:46.854Z",
    "name": "dash"
  }
},
{
  "model": "topics.tag",
  "pk": 51,
  "fields": {
    "created": "2018-02-08T16:12:47.290Z",
    "modified": "2018-02-08T16:12:47.290Z",
    "name": "your-tags"
  }
},
{
  "model": "topics.tag",
  "pk": 52,
  "fields": {
    "created": "2018-02-08T16:12:47.575Z",
    "modified": "2018-02-08T16:12:47.575Z",
    "name": "google-sheets"
  }
},
{
  "model": "topics.tag",
  "pk": 53,
  "fields": {
    "created": "2018-02-08T16:12:47.578Z",
    "modified": "2018-02-08T16:12:47.578Z",
    "name": "xml"
  }
},
{
  "model": "topics.tag",
  "pk": 54,
  "fields": {
    "created": "2018-02-08T16:12:47.581Z",
    "modified": "2018-02-08T16:12:47.582Z",
    "name": "xquery"
  }
},
{
  "model": "topics.tag",
  "pk": 55,
  "fields": {
    "created": "2018-02-08T16:12:47.862Z",
    "modified": "2018-02-08T16:12:47.862Z",
    "name": "node"
  }
},
{
  "model": "topics.tag",
  "pk": 56,
  "fields": {
    "created": "2018-02-08T16:12:47.865Z",
    "modified": "2018-02-08T16:12:47.866Z",
    "name": "express"
  }
},
{
  "model": "topics.tag",
  "pk": 57,
  "fields": {
    "created": "2018-02-08T16:12:47.870Z",
    "modified": "2018-02-08T16:12:47.870Z",
    "name": "pptxgenjs"
  }
},
{
  "model": "topics.tag",
  "pk": 58,
  "fields": {
    "created": "2018-02-08T16:12:49.891Z",
    "modified": "2018-02-08T16:12:49.891Z",
    "name": "flask-assets"
  }
},
{
  "model": "topics.tag",
  "pk": 59,
  "fields": {
    "created": "2018-02-08T16:12:49.894Z",
    "modified": "2018-02-08T16:12:49.894Z",
    "name": "pyscss"
  }
},
{
  "model": "topics.tag",
  "pk": 60,
  "fields": {
    "created": "2018-02-08T16:12:50.810Z",
    "modified": "2018-02-08T16:12:50.810Z",
    "name": "testing"
  }
},
{
  "model": "topics.tag",
  "pk": 61,
  "fields": {
    "created": "2018-02-08T16:12:51.062Z",
    "modified": "2018-02-08T16:12:51.062Z",
    "name": "flask-sqlalchemy"
  }
},
{
  "model": "topics.tag",
  "pk": 62,
  "fields": {
    "created": "2018-02-08T16:12:51.065Z",
    "modified": "2018-02-08T16:12:51.065Z",
    "name": "flask-wtforms"
  }
},
{
  "model": "topics.tag",
  "pk": 63,
  "fields": {
    "created": "2018-02-08T16:12:51.271Z",
    "modified": "2018-02-08T16:12:51.271Z",
    "name": "3.6.1"
  }
},
{
  "model": "topics.tag",
  "pk": 64,
  "fields": {
    "created": "2018-02-08T16:12:57.746Z",
    "modified": "2018-02-08T16:12:57.746Z",
    "name": "matplotlib"
  }
},
{
  "model": "topics.tag",
  "pk": 65,
  "fields": {
    "created": "2018-02-08T16:12:57.788Z",
    "modified": "2018-02-08T16:12:57.788Z",
    "name": "seaborn"
  }
},
{
  "model": "topics.tag",
  "pk": 66,
  "fields": {
    "created": "2018-02-08T16:12:59.377Z",
    "modified": "2018-02-08T16:12:59.377Z",
    "name": "subprocess"
  }
},
{
  "model": "topics.tag",
  "pk": 67,
  "fields": {
    "created": "2018-02-08T16:13:00.347Z",
    "modified": "2018-02-08T16:13:00.347Z",
    "name": "express.js"
  }
},
{
  "model": "topics.tag",
  "pk": 68,
  "fields": {
    "created": "2018-02-08T16:13:00.375Z",
    "modified": "2018-02-08T16:13:00.375Z",
    "name": "jest"
  }
},
{
  "model": "topics.tag",
  "pk": 69,
  "fields": {
    "created": "2018-03-02T15:54:54.304Z",
    "modified": "2018-03-02T15:54:54.306Z",
    "name": "weird"
  }
},
{
  "model": "topics.tag",
  "pk": 70,
  "fields": {
    "created": "2018-03-02T15:54:54.348Z",
    "modified": "2018-03-02T15:54:54.349Z",
    "name": "message"
  }
},
{
  "model": "topics.tag",
  "pk": 71,
  "fields": {
    "created": "2018-03-02T15:54:54.368Z",
    "modified": "2018-03-02T15:54:54.369Z",
    "name": "formats"
  }
},
{
  "model": "topics.tag",
  "pk": 72,
  "fields": {
    "created": "2018-03-02T16:55:27.500Z",
    "modified": "2018-03-02T16:55:27.501Z",
    "name": "tag"
  }
},
{
  "model": "topics.tag",
  "pk": 73,
  "fields": {
    "created": "2018-03-02T18:00:07.312Z",
    "modified": "2018-03-02T18:00:07.313Z",
    "name": "blah"
  }
},
{
  "model": "topics.topic",
  "pk": 1,
  "fields": {
    "created": "2018-02-08T16:11:12.332Z",
    "modified": "2018-02-08T16:11:12.333Z",
    "title": "Having an issue reading a text file that was submitted via a web form using POST...",
    "description": "Originally posted this on reddit, \n\nSo I wrote some code to parse through a CSV file in Jupyter, it works great but it's reading a local static file. I thought it would be simple to transition to the web (since I'm trying to make this into something my coworkers can easily access), but so far it has proved to be quite difficult. I finally got to the point where I'm submitting and reading the file, but now I realize every time I submit the same csv file, the script gets different data. Anyone know what's happening here? It sounds like a buffer issue but I don't know the proper way to upload and parse a text file via POST.\n\n<https://www.reddit.com/r/learnpython/comments/7k22zs/having_an_issue_with_reading_a_text_file_that_was/>",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 2,
  "fields": {
    "created": "2018-02-08T16:11:34.186Z",
    "modified": "2018-02-08T16:11:34.186Z",
    "title": "Having an issue reading a text file that was submitted via a web form using POST...",
    "description": "Originally posted this on reddit, \n\nSo I wrote some code to parse through a CSV file in Jupyter, it works great but it's reading a local static file. I thought it would be simple to transition to the web (since I'm trying to make this into something my coworkers can easily access), but so far it has proved to be quite difficult. I finally got to the point where I'm submitting and reading the file, but now I realize every time I submit the same csv file, the script gets different data. Anyone know what's happening here? It sounds like a buffer issue but I don't know the proper way to upload and parse a text file via POST.\n\n<https://www.reddit.com/r/learnpython/comments/7k22zs/having_an_issue_with_reading_a_text_file_that_was/>",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 3,
  "fields": {
    "created": "2018-02-08T16:12:00.456Z",
    "modified": "2018-02-08T16:12:00.456Z",
    "title": "Having an issue reading a text file that was submitted via a web form using POST...",
    "description": "Originally posted this on reddit, \n\nSo I wrote some code to parse through a CSV file in Jupyter, it works great but it's reading a local static file. I thought it would be simple to transition to the web (since I'm trying to make this into something my coworkers can easily access), but so far it has proved to be quite difficult. I finally got to the point where I'm submitting and reading the file, but now I realize every time I submit the same csv file, the script gets different data. Anyone know what's happening here? It sounds like a buffer issue but I don't know the proper way to upload and parse a text file via POST.\n\n<https://www.reddit.com/r/learnpython/comments/7k22zs/having_an_issue_with_reading_a_text_file_that_was/>",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 4,
  "fields": {
    "created": "2018-02-08T16:12:31.117Z",
    "modified": "2018-02-08T16:12:31.117Z",
    "title": "Having an issue reading a text file that was submitted via a web form using POST...",
    "description": "Originally posted this on reddit, \n\nSo I wrote some code to parse through a CSV file in Jupyter, it works great but it's reading a local static file. I thought it would be simple to transition to the web (since I'm trying to make this into something my coworkers can easily access), but so far it has proved to be quite difficult. I finally got to the point where I'm submitting and reading the file, but now I realize every time I submit the same csv file, the script gets different data. Anyone know what's happening here? It sounds like a buffer issue but I don't know the proper way to upload and parse a text file via POST.\n\n<https://www.reddit.com/r/learnpython/comments/7k22zs/having_an_issue_with_reading_a_text_file_that_was/>",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 5,
  "fields": {
    "created": "2018-02-08T16:12:31.571Z",
    "modified": "2018-02-08T16:12:31.572Z",
    "title": "Having an issue Pandas Data frame subtraction",
    "description": "TypeError: unsupported operand type(s) for -: 'str' and 'str'\n\nI'm using the operation like below\noutput = df1.subract(df2, axis=0, fill_value=0)\nRequirement:  have 2 DF's , 1st DF contains all data with correct values and 2nd DF is similar to first DF\nand contains extra rows in which some column values are NaN. here i need to subtract DF1 from DF2 and the result DF should contain only error(column contains NaN) rows",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      3
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 6,
  "fields": {
    "created": "2018-02-08T16:12:31.855Z",
    "modified": "2018-02-08T16:12:31.855Z",
    "title": "transfering table data from one psql db to other  psql table in different db",
    "description": "I am stuck, trying to do that. I have tried a lot of different queries in psql console such as :\n```INSERT INTO \"pro-greffe_development\".departments\nSELECT name description department_number slug FROM banquesansfrais.departments;```\nSo more precisely I am trying to transfer the data in fields ```ame description department_number slug``` from the db ```banquesansfrais``` table ```departments``` into the db ```pro-greffe_development``` table departments. \nBoth these tables have schema set to ```public```.\nHere's what I get after I launch my query in psql console :\n```ERROR:  relation \"pro-greffe_development.departments\" does not exist\nLINE 1: INSERT INTO \"pro-greffe_development\".departments```",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      4
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 7,
  "fields": {
    "created": "2018-02-08T16:12:33.637Z",
    "modified": "2018-02-08T16:12:33.637Z",
    "title": "What are your commands?",
    "description": "I want to know all of Clippy\u2019s commands.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      5
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 8,
  "fields": {
    "created": "2018-02-08T16:12:33.827Z",
    "modified": "2018-02-08T16:12:33.827Z",
    "title": "How to resolve blockchain dns using Python Requests",
    "description": "There are certain blockchain domains that are resolved only by blockchain dns resolvers. \nFor ex: <http://Jstash.bazar>\nIf you try to open this link in a browser, it wont get resolved. But, just install the browser plugin from <https://blockchain-dns.info/>\nand then try to open the site again, it will open up smoothly.\nI want to scrap some data from this site using Python Requests (browserless) and have no idea as to how to resolve such blockchain domains.\nAny help would be highly appreciated.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      6,
      7
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 9,
  "fields": {
    "created": "2018-02-08T16:12:34.079Z",
    "modified": "2018-02-08T16:12:34.079Z",
    "title": "Responsive web design with React, best practices",
    "description": "Diving into responsive web design with React for the first time. Wondering if my approach is an anti-pattern in any way, since it doesn\u2019t seem super common: for each view in my app, I\u2019m creating a \u201ccontainer\u201d component (e.g. `AppDashboard`) that uses a series of material-ui\u2019s `&lt;Hidden&gt;` component to basically do a switch statement across a bunch of child components that each lay out a different screen size, e.g. `AppDashboardDesktop` vs. `AppDashboardMobile`. I\u2019m separately extracting out all common children-of-children components, strings of text, etc so there\u2019s little code duplication between those two child components. I think this makes it a lot easier to manage the different layouts that end up pieced together with material-ui `&lt;Grid&gt;` components - you don\u2019t mess up the mobile view if you make changes to the desktop view. But it seems the more common approach would be to use just one file, and do e.g. `&lt;Grid sm={8} md={4} xl={3}&gt;`. Is this just the old webdev non-React way of thinking, or am I missing something?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      8,
      9
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 10,
  "fields": {
    "created": "2018-02-08T16:12:34.374Z",
    "modified": "2018-02-08T16:12:34.374Z",
    "title": "Best practice for CD to Staging environment and manual deployment to Production environment using CircleCI",
    "description": "Currently using CircleCI to run tests. Would like to further leverage CircleCI to continuously deploy successful builds to a staging environment on AWS ECS with the option to manually deploy to production if staging was successful. In CircleCI v2.0, workflows seem to be the best practice. Working hypothesis is to have a workflow that deploys to staging and holds for approval before deploying to production. The deploy-to-staging and deploy-to-production jobs would each have bash scripts that use AWS\u2019s CLI. If anyone has experience here or if there is a more elegant solution via CircleCI than the bash scripts, would love to hear.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      10,
      11,
      12
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 11,
  "fields": {
    "created": "2018-02-08T16:12:34.644Z",
    "modified": "2018-02-08T16:12:34.644Z",
    "title": "Change background-color of an element when value of input type color changes",
    "description": "I have a `&lt;div class=\"colorpicker_new_color\"&gt;&lt;/div&gt;` and `&lt;input type=\"color\" id=\"colorPicker\"&gt;&lt;/input&gt;` how do I make an event handler when `$('#colorPicker').val()` changes to put `$('.colorpicker_new_color').css(\"backgroundColor\") = $('#colorPicker').val()` and vice versa but I'll have to convert RGB into hex.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      13,
      14,
      15,
      16,
      17
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 12,
  "fields": {
    "created": "2018-02-08T16:12:34.950Z",
    "modified": "2018-02-08T16:12:34.950Z",
    "title": "SVGs in React",
    "description": "I'm trying to replace a bunch of png's in my app with svg's. Proving to be a lot more difficult than I expected. I'm trying out libraries like react-inlinesvg so I can render the SVG's with supplemental CSS-in-JS to get the size scaling right. Turning out to be a mess of wrappers &amp; editing the SVG's parameters. Probably lacking some basic understanding of how SVG's are supposed to work, or maybe missing some React library that abstracts this all out - any ideas?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      8,
      18,
      19
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 13,
  "fields": {
    "created": "2018-02-08T16:12:35.158Z",
    "modified": "2018-02-08T16:12:35.158Z",
    "title": "https website does not open with Chrome and Requests but works with firefox when using Proxy",
    "description": "I admit in advance that this is a very weird problem. I am still posting it hoping someone could figure out whats wrong.\nI am trying to access a webpage, url - <https://www.ticketmaster.com/member/payment_options>. I can open it using Google Chrome, Firefox and Python Requests as well.\nNow, I want to access the same page using a dedicated proxy from stormproxies. I follow the proxy setup on Firefox and Chrome, as well as use those in Requests code. The webpage opens up well in Firefox, but not in Chrome. It just keeps on waiting for the sever to respond. Same thing happens with Requests code. It times out if I use a timeout parameter.\n\nHere is the Requests code I am using:\n```import requests\n\nproxy = '&lt;proxy&gt;'\nproxies = {'http': 'http://{}'.format(proxy), 'https': 'http://{}'.format(proxy)}\n\n\nheaders = {\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'en-US,en;q=0.9',\n    'Cache-Control': 'max-age=0',\n    'Connection': 'keep-alive',\n    'Host': '<http://www.ticketmaster.com|www.ticketmaster.com>',\n    'Upgrade-Insecure-Requests': '1',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36'\n}\n\ns = requests.session()\ns.headers.update(headers)\n# s.proxies.update(proxies)\nurl = '<https://www.ticketmaster.com/member/payment_options>'\nr = s.get(url, timeout=30)\nprint(r.content.decode())```\n\nThis code would work fine, but as soon as you uncomment the line `s.proxies.update(proxies)`, it would throw TimeoutException.\n\nThe bigger issue here is that even Google Chrome isnt working.\nThe only reasons I could figure out is that Firefox has its own Proxy setup, but Google Chrome rather uses Windows Internet Explorer proxy settings and security settings.\n\nLet me know if any of you have come across this or if know a solution.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      6,
      20,
      21,
      22,
      23
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 14,
  "fields": {
    "created": "2018-02-08T16:12:35.475Z",
    "modified": "2018-02-08T16:12:35.475Z",
    "title": "SqliteDatabase showing up empty (no tables) during pytest session, even though peewee's create_tables appears to run",
    "description": "I have a branch where this is not a problem, and a branch where this is a problem, can't figure out what in the diff is causing it... Maybe something to do with SqliteDatabase and how it works with threads?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      24,
      25,
      26
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 15,
  "fields": {
    "created": "2018-02-08T16:12:35.670Z",
    "modified": "2018-02-08T16:12:35.670Z",
    "title": "Css basic, what affects the &lt;body&gt; to act this way?",
    "description": "body {\n    display: flex;\n    margin: 0;\n    text-align: center;\n    background: #424242;\n}\nthat's the css, and the dimensions are 1580\u00d7222, what could be affecting it to not be full screen",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      16
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 16,
  "fields": {
    "created": "2018-02-08T16:12:36.237Z",
    "modified": "2018-02-08T16:12:36.237Z",
    "title": "Error when using the Slack API",
    "description": "This is an error on my end (not Slack\u2019s). We\u2019re monitoring messages through the Slack event firehose. Attaching two screenshots. One is of the logs and one is of the relevant source code. It seems that the if statement on line 218 was not true, which resulted in the logging statements on lines 237-238. However, the channel ID of the message equals the HELP_CHANNEL and the user is not in ADMIN_USERS. Any help here would be much appreciated.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      27
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 17,
  "fields": {
    "created": "2018-02-08T16:12:36.657Z",
    "modified": "2018-02-08T16:12:36.658Z",
    "title": "Selecting DOM elements",
    "description": "The 5th line is not finished in js.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      15,
      28
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 18,
  "fields": {
    "created": "2018-02-08T16:12:36.991Z",
    "modified": "2018-02-08T16:12:36.991Z",
    "title": "Domain design of settings",
    "description": "We have a domain that includes an entity called team. What\u2019s the best way to model the concept of settings for a team? We currently have a team_settings table. Issues with this our two-fold. 1) What\u2019s the plural of settings? 2) It doesn\u2019t have an inherent identity - so should it be an entity?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      29,
      30
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 19,
  "fields": {
    "created": "2018-02-08T16:12:37.286Z",
    "modified": "2018-02-08T16:12:37.286Z",
    "title": "creating a custom widget with flask wtforms",
    "description": "I am strugling to find resources that explain how to create custom widget with wtforms. I want to display a list of toggle buttons. So far I ve been able to create a list of checkboxes with `SelectMultipleFields`:\n`class PrecisionForm(FlaskForm):\n    phone_number     = StringField('Phone number', [validators.Length(min=4, max=25)])\n    contact_emails = SelectMultipleField(\n            'Contact emails',\n            [at_least_one],\n            choices=[],\n            option_widget=widgets.CheckboxInput(),\n            widget=widgets.ListWidget(prefix_label=False)\n            )\n`",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      31,
      32
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 20,
  "fields": {
    "created": "2018-02-08T16:12:38.152Z",
    "modified": "2018-02-08T16:12:38.152Z",
    "title": "event delegation js",
    "description": "So I wrote first 2 in jQuery, seems like it's the same.. just another way to write it right?\nthe 3rd is in vanilla, now I am researching more... and stumbled upon this:\n<https://lists.evolt.org/archive/Week-of-Mon-20090209/127339.html>\nI copy pasted the part that I didn't get to work, it's from 2009, is it too old or what's with the syntax?\n<https://jsfiddle.net/d8ak0edq/1/>",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      15,
      33,
      34
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 21,
  "fields": {
    "created": "2018-02-08T16:12:38.682Z",
    "modified": "2018-02-08T16:12:38.682Z",
    "title": "RDBMS Schema for a Scientific Experiment Dat aBase",
    "description": "I work with experimental data (structured into 4 sheets / CSV and 1 CSV / experiment currently). I would like to store this in an RDBMS to allow for some querying as well. Two of the aforementioned sheets are time series / voltage series. I'm unsure if I should avoid creating 4 tables / experiment each time. If I should just keep 4 master tables, I'm not sure what to use as a primary key. Each experiment often involves several sensors (so the fields in one of the time series tables would be experiment_id, sensor_id, raw_time,raw_current_electrode1...electroden. (So I'm unsure what a unique identifier would be)",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      35,
      36
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 22,
  "fields": {
    "created": "2018-02-08T16:12:38.938Z",
    "modified": "2018-02-08T16:12:38.939Z",
    "title": "RDBMS Schema for a Scientific Experiment DataBase",
    "description": "I work with experimental data (structured into 4 sheets / CSV and 1 CSV / experiment currently). I would like to store this in an RDBMS to allow for some querying as well. Two of the aforementioned sheets are time series / voltage series. I'm unsure if I should avoid creating 4 tables / experiment each time. If I should just keep 4 master tables, I'm not sure what to use as a primary key. Each experiment often involves several sensors (so the fields in one of the time series tables would be experiment_id, sensor_id, raw_time,raw_current_electrode1...electroden. (So I'm unsure what a unique identifier would be)",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      35,
      36
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 23,
  "fields": {
    "created": "2018-02-08T16:12:39.203Z",
    "modified": "2018-02-08T16:12:39.203Z",
    "title": "Time Series DB Handling",
    "description": "I work with experimental data (structured into 4 sheets / CSV and 1 CSV / experiment currently). I decided to store this data in 4 master tables, and use an experiment_ID and sensor_ID column to help query data. (In doing so, the DB will have no primary key). However, two of these tables are time series and may not have the same frequency of time. Can anyone recommend a good way to handle time series data?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      35,
      36
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 24,
  "fields": {
    "created": "2018-02-08T16:12:39.916Z",
    "modified": "2018-02-08T16:12:39.916Z",
    "title": "HTMLCollection - adding different attributes affects the live collection differently",
    "description": "We all know `document.getElementsByClassName` and `document.getElementsByTagName` are live HTMLCollections.\nSo I made 2 examples, one with adding a class attribute, the other with bgcolor. Why does the first act like expected and the other gets it's job done...\n<https://jsfiddle.net/adkuca/84ryjp7s/2/>\n<https://jsfiddle.net/adkuca/f1o9h7be/>\nHow can I know what will work normally and what wont??",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      15,
      17,
      28,
      37,
      38,
      39
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 25,
  "fields": {
    "created": "2018-02-08T16:12:40.325Z",
    "modified": "2018-02-08T16:12:40.326Z",
    "title": "Drop a level from Pandas Multiindex",
    "description": "I have a Pandas DF, image attached, and want to drop a level so the columns 'line up'. Can anyone advise?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      36
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 26,
  "fields": {
    "created": "2018-02-08T16:12:40.560Z",
    "modified": "2018-02-08T16:12:40.560Z",
    "title": "Flatten Index Hierarchy of a Pandas DF",
    "description": "How would I flatten this DF structure such that the columns 'calibration_type' and 'calibration_num' values would be shown in every row.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      36
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 27,
  "fields": {
    "created": "2018-02-08T16:12:40.928Z",
    "modified": "2018-02-08T16:12:40.928Z",
    "title": "Pytest failing despite custom error handling in Flask",
    "description": "Working on a Flask app and have a custom error handler for an exception I raise in a route. This works perfectly when testing manually with HTTP responses. However, when running a functional test with pytest, the test fails when the exception is initially raised before the Flask app gets a chance to handle it.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      24,
      40,
      41
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 28,
  "fields": {
    "created": "2018-02-08T16:12:41.225Z",
    "modified": "2018-02-08T16:12:41.226Z",
    "title": "Mimic jQuery's Delegated Event Listener",
    "description": "So here I have a piece of code that basically does what jQuery's delegated event listener would do. This was purely just to learn.\n<https://jsfiddle.net/adkuca/rdrekqk2/2/>\nHow to make it that it would have the same syntax, like `outer.addDelegateEventListener('mousedown', 'div', function(evt){})`",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      15,
      37,
      42,
      43
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 29,
  "fields": {
    "created": "2018-02-08T16:12:41.508Z",
    "modified": "2018-02-08T16:12:41.508Z",
    "title": "Trying to replicate c# function in python",
    "description": "So I'm trying to replicate function which is written in c#. In c# it passes two objects to the function, which is pretty clear how everything works, but I can't replicate same functionality in python",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      44
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 30,
  "fields": {
    "created": "2018-02-08T16:12:41.882Z",
    "modified": "2018-02-08T16:12:41.882Z",
    "title": "Py2app application not opening with message \"myapp Error\"",
    "description": "My setup.py file is as follows:\n\nfrom setuptools import setup\nAPP = ['Pythagoras Calculator.py']\nDATA_FILES = []\nOPTIONS = {\n'iconfile': 'icon.icns'\n}\nsetup(\napp=APP,\ndata_files=DATA_FILES,\noptions={'py2app': OPTIONS},\nsetup_requires=['py2app'],\n)",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 31,
  "fields": {
    "created": "2018-02-08T16:12:44.826Z",
    "modified": "2018-02-08T16:12:44.826Z",
    "title": "Python: Formatting a list properly",
    "description": "A Tkinter entry widget accepts input (a list) separated by ' , '  . The issue is that the list gets formatted like ['600,1200,1800'] rather than ['600','1200','1800']. Can anyone advise on how to format this properly?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      45
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 32,
  "fields": {
    "created": "2018-02-08T16:12:46.147Z",
    "modified": "2018-02-08T16:12:46.148Z",
    "title": "Wordpress custom post meta data",
    "description": "I'm getting post custom values with get_post_custom_values('my-key', post_id) and get return of something like that \"0 =&gt; string 'a:30:{s:8:\"subtitle\";s:50:\";s:12:\"featuredItem\";s:1:\"0\";s:10:\"headerType\";s:3:\"map\";s:11:\"headerImage\";s:0:\"\"}\", question is how to extract those values by keywords?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      46,
      47,
      48
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 33,
  "fields": {
    "created": "2018-02-08T16:12:46.828Z",
    "modified": "2018-02-08T16:12:46.829Z",
    "title": "Plotly Dash: Render a Graph only if certain data in a Pandas DataFrame exists",
    "description": "I currently use Plotly Dash to create a webapp to visualize data. The syntax involves using dcc.Graph to render an HTML Div as follows. Below the html.Div is the code to render the plot figure. The x and y axis values come from a Pandas DF. Can anyone recommend a way to use an IF statement to check if a given column exists and then proceed to return the following code. Plotly Dash gives an error when a 'fig' variable does not exist\nhtml.Div([\n    html.Div([\n        html.H3('Chart'),\n        dcc.Graph(id='Chart',figure = chart_fig\n)\nsensor3_trace_day1 = Scatter(\ny = sensor_3_day1['BG Calibration (mg/dl)'],\nx = sensor_3_day1['Current (nA)'],\nmode = 'markers',\nname = 'Sensor 3 Day 1'\n)    \ndata = [sensor1_trace]\nlayout = Layout(showlegend=True, height = 600, width = 600, title='Day     1: BG Cal vs Current',xaxis={'title':'Current [nA]'},yaxis={'title':'BG Calibration (mg/dl)'})\nchart_fig = dict(data=data, layout=layout)\niplot(chart_fig)",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      36,
      49,
      50
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 34,
  "fields": {
    "created": "2018-02-08T16:12:47.288Z",
    "modified": "2018-02-08T16:12:47.288Z",
    "title": "First Project",
    "description": "I just want to know how I can see what my website might look like. I am using sublime text with html language.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      51
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 35,
  "fields": {
    "created": "2018-02-08T16:12:47.573Z",
    "modified": "2018-02-08T16:12:47.573Z",
    "title": "Trouble with xquery in Google Sheets",
    "description": "I'm trying to use XML and xquery to collect some data in Google Sheets, but I'm having a hard time fetching the specific result I'm looking for",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      52,
      53,
      54
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 36,
  "fields": {
    "created": "2018-02-08T16:12:47.839Z",
    "modified": "2018-02-08T16:12:47.839Z",
    "title": "Unable to set JavaScript click handlers",
    "description": "I'm trying to get a JS function to run on click of a button. This should be easy, but I can't seem to get the button element by getElementById, and am at a roadblock. For context, I'm using the PptxGenJS library to generate a powerpoint (using JS) on the click of a butoon.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      14,
      55,
      56,
      57
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 37,
  "fields": {
    "created": "2018-02-08T16:12:48.417Z",
    "modified": "2018-02-08T16:12:48.417Z",
    "title": "Python with HTML Site?",
    "description": "Trying to figure out if it will be possible to store a python variable in the HTML code and run some script based off a user's inputed data",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      17
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 38,
  "fields": {
    "created": "2018-02-08T16:12:48.744Z",
    "modified": "2018-02-08T16:12:48.744Z",
    "title": "HTML5 load video from website",
    "description": "I\u2019m trying to load mp4 videos from another website but it only works locally, not on my heroku server",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      17,
      14
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 39,
  "fields": {
    "created": "2018-02-08T16:12:49.087Z",
    "modified": "2018-02-08T16:12:49.087Z",
    "title": "Using Python method in Javascript code",
    "description": "We have some text processing being done in python that we need to integrate into our javascript code to get it working on the website, but we don\u2019t know how to integrate it",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      14,
      1
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 40,
  "fields": {
    "created": "2018-02-08T16:12:49.380Z",
    "modified": "2018-02-08T16:12:49.380Z",
    "title": "Wordpress add_rewrite_rule",
    "description": "Trying to rewrite url from /dashboard/edit/?post_id=THE_ID to /dashboard/edit/post_id/THE_ID, but nothing works.",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      46,
      47,
      48
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 41,
  "fields": {
    "created": "2018-02-08T16:12:49.886Z",
    "modified": "2018-02-08T16:12:49.886Z",
    "title": "import with flask-assets and pycss",
    "description": "I am using flask-assets in a flask app. In my scss bundle I register all my scss files from my static/sass folder. Some of my scss files need to import some other files ( for instance my sass/base/_base.scss needs to import sass/abstracts/_variables.scss. My import in my _base.scss file looks like that :",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      58,
      59
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 42,
  "fields": {
    "created": "2018-02-08T16:12:50.251Z",
    "modified": "2018-02-08T16:12:50.251Z",
    "title": "Adding Plotly Charts to an HTML file with Python",
    "description": "Similar to <https://stackoverflow.com/questions/47529290/python-plotly-offline-chart-embed-into-html-not-working>, I have been using Plotly to generate some charts and then create an HTML string in python which is then written to an HTML file, generating an HTML report for my Plotly charts. In the example below, I create a Plotly chart object (aPlot) and then insert that into an HTML string. My question is is there a Pythonic way to check whether the aPlot object exists? Something like try and except before the ''' + aPlot ''' line in the HTML string. I know this is poorly worded and am happy to give better context if needed.                                                                                           ```import plotly\n\nfig = {'data': [{'x': [1,2,3],\n                  'y': [2,5,3],\n                  'type': 'bar'}],\n      'layout': {'width': 800,\n                 'height': 550}}\n\naPlot = plotly.offline.plot(fig, \n                            config={\"displayModeBar\": False}, \n                            show_link=False, \n                            include_plotlyjs=False, \n                            output_type='div')\n\nhtml_string = '''\n&lt;html&gt;\n    &lt;head&gt;\n      &lt;script src=\"<https://cdn.plot.ly/plotly-latest.min.js>\"&gt;&lt;/script&gt;\n      &lt;link rel=\"stylesheet\" href=\"<https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css>\"&gt;\n      &lt;style&gt;body{ margin:0 100; background:whitesmoke; }&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;h1&gt;Monthly Report&lt;/h1&gt;\n      ''' + aPlot + '''\n    &lt;/body&gt;\n&lt;/html&gt;'''\n\nwith open(\"nick.html\", 'w') as f:\n    f.write(html_string)```",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      49,
      17
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 43,
  "fields": {
    "created": "2018-02-08T16:12:50.526Z",
    "modified": "2018-02-08T16:12:50.526Z",
    "title": "How can I round a variable in python to 4 significant figures? Example: 3.1415926 rounded to 3.142 instead 3",
    "description": "Example: 3.1415926 rounded to 3.142 instead 3. I would use round() but it rounds to the nearest integer",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 44,
  "fields": {
    "created": "2018-02-08T16:12:50.800Z",
    "modified": "2018-02-08T16:12:50.800Z",
    "title": "Pytest executing tests (unexpectedly?) in parallel",
    "description": "I feel like I'm fundamentally misunderstanding something related to scopes or fixtures. I have a bunch of production code that uses threads, and I'm running into nondeterministic outcomes (i.e. fails once per ~10 runs or  when trying to test them with pytest. I'm pretty confident is has something to do with tests trampling each other: one test starts, makes some changes to my application state, then another test tries to execute when starting from an unexpected application state. I'm _not_ using pytest xdist, so I'm confused as to why this would happen. Indeed when I add a fixture like this:\n```@pytest.fixture(autouse=True)\ndef log_test_start():\n    logger = get_logger('Fixtures')\n    <http://logger.info|logger.info>('******** TEST START ********')\n    yield\n    <http://logger.info|logger.info>('******** TEST END ********')\n```\nI see log messages like:\n```2018-02-06 10:15:53,005 - Fixtures - INFO - log_test_start - ******** TEST START ********\n2018-02-06 10:15:53,005 - Fixtures - INFO - log_test_start - ******** TEST START ********\n2018-02-06 10:15:53,005 - Fixtures - INFO - log_test_start - ******** TEST START ********\n2018-02-06 10:15:53,021 - Fixtures - INFO - log_test_start - ******** TEST END ********\n2018-02-06 10:15:53,021 - Fixtures - INFO - log_test_start - ******** TEST END ********\n2018-02-06 10:15:53,021 - Fixtures - INFO - log_test_start - ******** TEST END ********\n```\nWhy aren't they executing in sequence? Am I misunderstanding something about how pytest is supposed to work, or did I do something funky with my setup elsewhere?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      60,
      24
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 45,
  "fields": {
    "created": "2018-02-08T16:12:51.040Z",
    "modified": "2018-02-08T16:12:51.040Z",
    "title": "How to pass query of results from flask-sql-alchemy ",
    "description": "I have a query in flask sql alchemy, that has a set of results from the model, when I try to pass this to a form it does not work as it is a query and not and object, is there a way around this?\n:sos:",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      40,
      61,
      62
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 46,
  "fields": {
    "created": "2018-02-08T16:12:51.264Z",
    "modified": "2018-02-08T16:12:51.264Z",
    "title": "IDLE giving me a syntax error for no reason...",
    "description": "My print statements from lines 18 to 22 are giving me a syntax error for no reason. Code in #session-59",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      63
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 47,
  "fields": {
    "created": "2018-02-08T16:12:51.860Z",
    "modified": "2018-02-08T16:12:51.860Z",
    "title": "How can I run my python 3.6 program with its own GUI as opposed to the command line?",
    "description": "I have a program that runs fine in the command line but how could I make it run with its own GUI or window instead of the command line?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 48,
  "fields": {
    "created": "2018-02-08T16:12:53.982Z",
    "modified": "2018-02-08T16:12:53.982Z",
    "title": "General python coding advice, refacto",
    "description": "I wrote a small lib that sends request to github api and I use it in my flask app. I'd like to share my code with you to get some advice in order to improve my python skills. I know this is very general but any good refacto advice is welcome. \nThere are actually two things I m wondering about :thinking_face:. Should I wrap this code into a class or a module ? Right now Im just importing all methods from the file.\nSecond do you think the way im dealing with exceptions is fine or should I do it differently, creating a precise exception child class ? Thanks for all advices",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 49,
  "fields": {
    "created": "2018-02-08T16:12:54.872Z",
    "modified": "2018-02-08T16:12:54.872Z",
    "title": "How to create dynamic form composite in flask-wtforms",
    "description": "I have a list of results from a db that I want to loop through in my wtforms, each of them has their own id that are unique, so I will have one save button that posts all unique data that has had its checkbox checked. I read this; <https://wtforms.readthedocs.io/en/1.0.4/specific_problems.html#dynamic-form-composition>. But cannot seem to understand how to use it?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      32,
      40
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 50,
  "fields": {
    "created": "2018-02-08T16:12:57.684Z",
    "modified": "2018-02-26T16:49:41.789Z",
    "title": "Modified Bland Altman Plot.",
    "description": "The Plot I'm trying to create compares two diagnostic sensors (in this example, glucose sensors). The x axis shows the gold standard/reference sensor values plotted against the absolute errors for each corresponding value. I'll attach a code snippet and an image of the plot produces. I need to add some annotations and an additional trace, which is what I need help with",
    "is_private": false,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      49,
      64,
      65
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 51,
  "fields": {
    "created": "2018-02-08T16:12:58.762Z",
    "modified": "2018-02-08T16:12:58.762Z",
    "title": "Recursively create dict from object",
    "description": "`vars(my_obj)` (the cleaner form of `my_obj.__dict__``) is close, but trying to find a clean way to do nested objects, maybe not working this correctly as I'm finding little help on google",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 52,
  "fields": {
    "created": "2018-02-08T16:12:59.329Z",
    "modified": "2018-02-08T16:12:59.329Z",
    "title": "Launching subprocesses in parallel in python script without blocking execution of the script",
    "description": ": I am writting a test method for my flask app in which I need to 1) launch my flask app 2) expose it publicly with ngrok.\nThus I need to launch two processes from my test script :\n```python app.py```\n==&gt; launching my flask app\n```ngrok http 5000```\n==&gt; listening to port 5000 (on which the Flask app is running and exposing public Url\nin the case of the ngrok process I also need to get the output of the ngrok command in order to get the url on which I am publicly exposing the flask app.\nI need this to process to run in parallel and not to block the execution of my script.\nI am really unsure about how to do this. I was thinking about running background processes ? I went through <https://docs.python.org/2/library/subprocess.html>, but I cant figure much out of the docs. So far I have only be able to launch a process from my script but it\u2019s blocking the rest of my script.\nI will also need to kill the processes at the end of my script.\nCould someone please help and maybe give me an exampel as how they would achieve this ?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      1,
      66
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 53,
  "fields": {
    "created": "2018-02-08T16:13:00.320Z",
    "modified": "2018-02-08T16:13:00.321Z",
    "title": "JavaScript single request to two different ports",
    "description": "I'm testing a script where one function makes an http request and is then called in another function.\nThe first function is:\n```export function getFeedData (sub) {\n    if (getFeedId(sub) === 2) {\n        return axios.get('<http://localhost:4000>').then((data) =&gt; \nJSON.parse(data));\n    }\n}```\nAnd the second is:\n```export function isDelay (sub, stop) {\n    return getFeedData(sub).then((data) =&gt; {\n        return data.entity.filter((entityObj) =&gt; {\n            return entityObj.stop_time_update !== undefined;\n        });\n    }).then((newData) =&gt;  {\n        console.log(newData);\n    }).catch((err) =&gt; {\n        console.log(err);\n    });\n}```\nThe reason they're two different functions is that the second will eventually be longer, and I wanted to separate everything out for the sake of simplicity and making my code a bit more declarative.\nThe tests for these functions currently look like this:\n```import express from 'express';\nimport { getFeedId, getFeedData, reverseStop, isDelay } from \n'../mocks/apiMock';\n\nconst app = express();\napp.use(express.static('../mocks/MockData.json'));\n\nit('returns json data', (done) =&gt; {\n    app.listen(4000, function () {\n        expect.assertions(2);\n        return getFeedData('L').then((data) =&gt; {\n            expect(data).toBeDefined();\n            expect(data.header.gtfs_realtime_version).toBe('1.0');\n        });\n    });\n    done();\n});\n\nit('returns either the delay or time until the next train' , (done) \n=&gt; {\n    app.listen(4000, function () {\n        isDelay('L', 'Lorimer St');\n    });\n    done();\n});```\nThat second test doesn't run because it's trying to listen on a port that's already occupied.\nThe solution I had in mind would be to pass `app.listen()` `0` as its first parameter so it listens on a random port. However, I don't know how I could get my axios request to request that specific port. Is there a way to do this? Or perhaps a better solution to my problem?",
    "is_private": true,
    "original_poster": 57,
    "group": 1,
    "tags": [
      14,
      67,
      68
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 54,
  "fields": {
    "created": "2018-03-02T15:54:54.260Z",
    "modified": "2018-03-02T15:54:54.261Z",
    "title": "Topic With Poor Messages",
    "description": "I'm going to put a bunch of weirdly formatted messages in there!!!",
    "is_private": true,
    "original_poster": 149,
    "group": 3,
    "tags": [
      69,
      70,
      71
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 55,
  "fields": {
    "created": "2018-03-02T16:55:27.492Z",
    "modified": "2018-03-02T16:55:27.493Z",
    "title": "Testing",
    "description": "123",
    "is_private": true,
    "original_poster": 149,
    "group": 3,
    "tags": [
      72
    ]
  }
},
{
  "model": "topics.topic",
  "pk": 56,
  "fields": {
    "created": "2018-03-02T18:00:07.303Z",
    "modified": "2018-03-02T18:00:07.304Z",
    "title": "blah",
    "description": "blah",
    "is_private": true,
    "original_poster": 149,
    "group": 3,
    "tags": [
      73
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 1,
  "fields": {
    "created": "2018-02-08T16:11:12.376Z",
    "modified": "2018-02-08T16:11:12.377Z",
    "time_start": "2017-12-15T22:14:42Z",
    "time_end": "2017-12-19T09:16:08Z",
    "status": "OPEN",
    "topic": 1,
    "participants": []
  }
},
{
  "model": "topics.discussion",
  "pk": 2,
  "fields": {
    "created": "2018-02-08T16:11:34.200Z",
    "modified": "2018-02-08T16:11:34.200Z",
    "time_start": "2017-12-15T22:14:42Z",
    "time_end": "2017-12-19T09:16:08Z",
    "status": "OPEN",
    "topic": 2,
    "participants": [
      152,
      57,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 3,
  "fields": {
    "created": "2018-02-08T16:12:00.471Z",
    "modified": "2018-02-08T16:12:00.471Z",
    "time_start": "2017-12-15T22:14:42Z",
    "time_end": "2017-12-19T09:16:08Z",
    "status": "OPEN",
    "topic": 3,
    "participants": [
      152,
      57,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 4,
  "fields": {
    "created": "2018-02-08T16:12:31.155Z",
    "modified": "2018-02-08T16:12:31.155Z",
    "time_start": "2017-12-15T22:14:42Z",
    "time_end": "2017-12-19T09:16:08Z",
    "status": "OPEN",
    "topic": 4,
    "participants": [
      152,
      57,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 5,
  "fields": {
    "created": "2018-02-08T16:12:31.584Z",
    "modified": "2018-02-08T16:12:31.584Z",
    "time_start": "2017-12-20T11:39:27Z",
    "time_end": "2017-12-21T10:28:14Z",
    "status": "OPEN",
    "topic": 5,
    "participants": [
      104,
      57,
      112
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 6,
  "fields": {
    "created": "2018-02-08T16:12:31.859Z",
    "modified": "2018-02-08T16:12:31.860Z",
    "time_start": "2017-12-27T12:52:44Z",
    "time_end": "2017-12-27T14:31:34Z",
    "status": "OPEN",
    "topic": 6,
    "participants": [
      104,
      57,
      36
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 7,
  "fields": {
    "created": "2018-02-08T16:12:33.664Z",
    "modified": "2018-02-08T16:12:33.665Z",
    "time_start": "2017-12-27T17:58:13Z",
    "time_end": "2017-12-27T17:58:13Z",
    "status": "OPEN",
    "topic": 7,
    "participants": [
      57
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 8,
  "fields": {
    "created": "2018-02-08T16:12:33.840Z",
    "modified": "2018-02-08T16:12:33.840Z",
    "time_start": "2018-01-04T14:52:53Z",
    "time_end": "2018-01-04T15:12:19Z",
    "status": "OPEN",
    "topic": 8,
    "participants": [
      104,
      57,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 9,
  "fields": {
    "created": "2018-02-08T16:12:34.128Z",
    "modified": "2018-02-08T16:12:34.128Z",
    "time_start": "2018-01-04T15:01:19Z",
    "time_end": "2018-01-05T15:42:35Z",
    "status": "OPEN",
    "topic": 9,
    "participants": [
      57,
      137,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 10,
  "fields": {
    "created": "2018-02-08T16:12:34.388Z",
    "modified": "2018-02-08T16:12:34.389Z",
    "time_start": "2018-01-04T23:49:57Z",
    "time_end": "2018-01-05T20:18:14Z",
    "status": "OPEN",
    "topic": 10,
    "participants": [
      57,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 11,
  "fields": {
    "created": "2018-02-08T16:12:34.666Z",
    "modified": "2018-02-08T16:12:34.666Z",
    "time_start": "2018-01-05T08:34:21Z",
    "time_end": "2018-01-05T16:22:49Z",
    "status": "OPEN",
    "topic": 11,
    "participants": [
      38,
      6,
      137,
      57,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 12,
  "fields": {
    "created": "2018-02-08T16:12:34.963Z",
    "modified": "2018-02-08T16:12:34.963Z",
    "time_start": "2018-01-05T20:57:27Z",
    "time_end": "2018-01-05T21:16:33Z",
    "status": "OPEN",
    "topic": 12,
    "participants": [
      57,
      137
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 13,
  "fields": {
    "created": "2018-02-08T16:12:35.182Z",
    "modified": "2018-02-08T16:12:35.182Z",
    "time_start": "2018-01-08T12:48:08Z",
    "time_end": "2018-01-09T20:55:57Z",
    "status": "OPEN",
    "topic": 13,
    "participants": [
      104,
      57,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 14,
  "fields": {
    "created": "2018-02-08T16:12:35.493Z",
    "modified": "2018-02-08T16:12:35.493Z",
    "time_start": "2018-01-09T14:32:05Z",
    "time_end": "2018-01-09T16:54:46Z",
    "status": "OPEN",
    "topic": 14,
    "participants": [
      57,
      137
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 15,
  "fields": {
    "created": "2018-02-08T16:12:35.674Z",
    "modified": "2018-02-08T16:12:35.674Z",
    "time_start": "2018-01-09T14:55:42Z",
    "time_end": "2018-01-09T15:30:42Z",
    "status": "OPEN",
    "topic": 15,
    "participants": [
      57,
      137,
      6,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 16,
  "fields": {
    "created": "2018-02-08T16:12:36.247Z",
    "modified": "2018-02-08T16:12:36.247Z",
    "time_start": "2018-01-09T16:09:47Z",
    "time_end": "2018-01-09T20:57:25Z",
    "status": "OPEN",
    "topic": 16,
    "participants": [
      104,
      57,
      137,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 17,
  "fields": {
    "created": "2018-02-08T16:12:36.666Z",
    "modified": "2018-02-08T16:12:36.667Z",
    "time_start": "2018-01-10T22:43:15Z",
    "time_end": "2018-01-11T00:27:40Z",
    "status": "OPEN",
    "topic": 17,
    "participants": [
      57,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 18,
  "fields": {
    "created": "2018-02-08T16:12:37.041Z",
    "modified": "2018-02-08T16:12:37.041Z",
    "time_start": "2018-01-12T20:39:53Z",
    "time_end": "2018-01-15T17:58:39Z",
    "status": "OPEN",
    "topic": 18,
    "participants": [
      57,
      137
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 19,
  "fields": {
    "created": "2018-02-08T16:12:37.352Z",
    "modified": "2018-02-08T16:12:37.352Z",
    "time_start": "2018-01-14T12:17:09Z",
    "time_end": "2018-01-16T17:59:15Z",
    "status": "OPEN",
    "topic": 19,
    "participants": [
      57,
      137,
      36
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 20,
  "fields": {
    "created": "2018-02-08T16:12:38.226Z",
    "modified": "2018-02-08T16:12:38.227Z",
    "time_start": "2018-01-15T18:27:15Z",
    "time_end": "2018-01-15T19:04:51Z",
    "status": "OPEN",
    "topic": 20,
    "participants": [
      57,
      137,
      6
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 21,
  "fields": {
    "created": "2018-02-08T16:12:38.694Z",
    "modified": "2018-02-08T16:12:38.694Z",
    "time_start": "2018-01-18T20:17:19Z",
    "time_end": "2018-01-18T22:55:15Z",
    "status": "OPEN",
    "topic": 21,
    "participants": [
      57,
      137,
      4,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 22,
  "fields": {
    "created": "2018-02-08T16:12:38.948Z",
    "modified": "2018-02-08T16:12:38.948Z",
    "time_start": "2018-01-19T00:27:08Z",
    "time_end": "2018-01-19T00:27:08Z",
    "status": "OPEN",
    "topic": 22,
    "participants": [
      57
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 23,
  "fields": {
    "created": "2018-02-08T16:12:39.213Z",
    "modified": "2018-02-08T16:12:39.213Z",
    "time_start": "2018-01-19T00:28:46Z",
    "time_end": "2018-01-19T00:53:27Z",
    "status": "OPEN",
    "topic": 23,
    "participants": [
      57,
      137,
      4
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 24,
  "fields": {
    "created": "2018-02-08T16:12:39.935Z",
    "modified": "2018-02-08T16:12:39.936Z",
    "time_start": "2018-01-19T17:27:07Z",
    "time_end": "2018-01-19T18:29:09Z",
    "status": "OPEN",
    "topic": 24,
    "participants": [
      57,
      149,
      6,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 25,
  "fields": {
    "created": "2018-02-08T16:12:40.330Z",
    "modified": "2018-02-08T16:12:40.331Z",
    "time_start": "2018-01-19T17:55:31Z",
    "time_end": "2018-01-19T22:08:42Z",
    "status": "OPEN",
    "topic": 25,
    "participants": [
      57,
      4,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 26,
  "fields": {
    "created": "2018-02-08T16:12:40.583Z",
    "modified": "2018-02-08T16:12:40.583Z",
    "time_start": "2018-01-19T22:05:49Z",
    "time_end": "2018-01-19T22:26:44Z",
    "status": "OPEN",
    "topic": 26,
    "participants": [
      57,
      4,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 27,
  "fields": {
    "created": "2018-02-08T16:12:40.943Z",
    "modified": "2018-02-08T16:12:40.943Z",
    "time_start": "2018-01-20T17:04:20Z",
    "time_end": "2018-01-23T19:37:27Z",
    "status": "OPEN",
    "topic": 27,
    "participants": [
      57,
      137,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 28,
  "fields": {
    "created": "2018-02-08T16:12:41.254Z",
    "modified": "2018-02-08T16:12:41.254Z",
    "time_start": "2018-01-21T21:36:16Z",
    "time_end": "2018-01-22T02:40:06Z",
    "status": "OPEN",
    "topic": 28,
    "participants": [
      57,
      137,
      6
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 29,
  "fields": {
    "created": "2018-02-08T16:12:41.528Z",
    "modified": "2018-02-08T16:12:41.528Z",
    "time_start": "2018-01-23T20:11:34Z",
    "time_end": "2018-01-23T21:47:42Z",
    "status": "OPEN",
    "topic": 29,
    "participants": [
      57,
      116,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 30,
  "fields": {
    "created": "2018-02-08T16:12:41.886Z",
    "modified": "2018-02-08T16:12:41.886Z",
    "time_start": "2018-01-25T05:28:04Z",
    "time_end": "2018-01-25T13:07:44Z",
    "status": "OPEN",
    "topic": 30,
    "participants": [
      104,
      57,
      42
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 31,
  "fields": {
    "created": "2018-02-08T16:12:44.889Z",
    "modified": "2018-02-08T16:12:44.890Z",
    "time_start": "2018-01-26T00:04:07Z",
    "time_end": "2018-01-26T00:12:34Z",
    "status": "OPEN",
    "topic": 31,
    "participants": [
      57,
      4,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 32,
  "fields": {
    "created": "2018-02-08T16:12:46.240Z",
    "modified": "2018-02-08T16:12:46.240Z",
    "time_start": "2018-01-30T13:58:12Z",
    "time_end": "2018-01-30T14:43:08Z",
    "status": "OPEN",
    "topic": 32,
    "participants": [
      104,
      57,
      116,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 33,
  "fields": {
    "created": "2018-02-08T16:12:46.871Z",
    "modified": "2018-02-08T16:12:46.871Z",
    "time_start": "2018-01-30T17:38:27Z",
    "time_end": "2018-02-03T14:19:04Z",
    "status": "OPEN",
    "topic": 33,
    "participants": [
      4,
      104,
      137,
      57,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 34,
  "fields": {
    "created": "2018-02-08T16:12:47.292Z",
    "modified": "2018-02-08T16:12:47.293Z",
    "time_start": "2018-02-03T16:22:46Z",
    "time_end": "2018-02-03T18:59:22Z",
    "status": "OPEN",
    "topic": 34,
    "participants": [
      57,
      66,
      137,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 35,
  "fields": {
    "created": "2018-02-08T16:12:47.584Z",
    "modified": "2018-02-08T16:12:47.585Z",
    "time_start": "2018-02-03T19:25:42Z",
    "time_end": "2018-02-03T19:33:07Z",
    "status": "OPEN",
    "topic": 35,
    "participants": [
      72,
      57,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 36,
  "fields": {
    "created": "2018-02-08T16:12:47.873Z",
    "modified": "2018-02-08T16:12:47.873Z",
    "time_start": "2018-02-03T20:03:51Z",
    "time_end": "2018-02-03T21:16:13Z",
    "status": "OPEN",
    "topic": 36,
    "participants": [
      104,
      137,
      79,
      57,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 37,
  "fields": {
    "created": "2018-02-08T16:12:48.424Z",
    "modified": "2018-02-08T16:12:48.425Z",
    "time_start": "2018-02-03T20:10:30Z",
    "time_end": "2018-02-03T20:20:18Z",
    "status": "OPEN",
    "topic": 37,
    "participants": [
      133,
      104,
      137,
      57,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 38,
  "fields": {
    "created": "2018-02-08T16:12:48.753Z",
    "modified": "2018-02-08T16:12:48.753Z",
    "time_start": "2018-02-03T22:05:43Z",
    "time_end": "2018-02-03T22:22:45Z",
    "status": "OPEN",
    "topic": 38,
    "participants": [
      16,
      32,
      57,
      63,
      137,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 39,
  "fields": {
    "created": "2018-02-08T16:12:49.098Z",
    "modified": "2018-02-08T16:12:49.098Z",
    "time_start": "2018-02-03T23:46:24Z",
    "time_end": "2018-02-04T00:23:54Z",
    "status": "OPEN",
    "topic": 39,
    "participants": [
      16,
      57,
      32,
      137
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 40,
  "fields": {
    "created": "2018-02-08T16:12:49.391Z",
    "modified": "2018-02-08T16:12:49.391Z",
    "time_start": "2018-02-05T15:50:10Z",
    "time_end": "2018-02-06T14:10:00Z",
    "status": "OPEN",
    "topic": 40,
    "participants": [
      137,
      116,
      149,
      57,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 41,
  "fields": {
    "created": "2018-02-08T16:12:49.897Z",
    "modified": "2018-02-08T16:12:49.897Z",
    "time_start": "2018-02-05T18:01:15Z",
    "time_end": "2018-02-05T19:22:14Z",
    "status": "OPEN",
    "topic": 41,
    "participants": [
      57,
      36,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 42,
  "fields": {
    "created": "2018-02-08T16:12:50.261Z",
    "modified": "2018-02-08T16:12:50.261Z",
    "time_start": "2018-02-06T00:29:51Z",
    "time_end": "2018-02-06T00:49:46Z",
    "status": "OPEN",
    "topic": 42,
    "participants": [
      4,
      137,
      149,
      57,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 43,
  "fields": {
    "created": "2018-02-08T16:12:50.530Z",
    "modified": "2018-02-08T16:12:50.530Z",
    "time_start": "2018-02-06T13:27:50Z",
    "time_end": "2018-02-06T13:57:13Z",
    "status": "OPEN",
    "topic": 43,
    "participants": [
      57,
      42,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 44,
  "fields": {
    "created": "2018-02-08T16:12:50.816Z",
    "modified": "2018-02-08T16:12:50.816Z",
    "time_start": "2018-02-06T15:34:24Z",
    "time_end": "2018-02-06T15:56:00Z",
    "status": "OPEN",
    "topic": 44,
    "participants": [
      57,
      137,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 45,
  "fields": {
    "created": "2018-02-08T16:12:51.069Z",
    "modified": "2018-02-08T16:12:51.070Z",
    "time_start": "2018-02-06T16:45:17Z",
    "time_end": "2018-02-06T16:57:26Z",
    "status": "OPEN",
    "topic": 45,
    "participants": [
      57,
      137,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 46,
  "fields": {
    "created": "2018-02-08T16:12:51.275Z",
    "modified": "2018-02-08T16:12:51.275Z",
    "time_start": "2018-02-06T19:02:04Z",
    "time_end": "2018-02-06T19:16:24Z",
    "status": "OPEN",
    "topic": 46,
    "participants": [
      57,
      42,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 47,
  "fields": {
    "created": "2018-02-08T16:12:51.882Z",
    "modified": "2018-02-08T16:12:51.883Z",
    "time_start": "2018-02-07T09:54:34Z",
    "time_end": "2018-02-07T20:06:49Z",
    "status": "OPEN",
    "topic": 47,
    "participants": [
      104,
      57,
      42,
      137
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 48,
  "fields": {
    "created": "2018-02-08T16:12:54.004Z",
    "modified": "2018-02-08T16:12:54.004Z",
    "time_start": "2018-02-07T11:14:45Z",
    "time_end": "2018-02-07T19:48:48Z",
    "status": "OPEN",
    "topic": 48,
    "participants": [
      57,
      137,
      36
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 49,
  "fields": {
    "created": "2018-02-08T16:12:54.937Z",
    "modified": "2018-02-08T16:12:54.937Z",
    "time_start": "2018-02-07T11:28:43Z",
    "time_end": "2018-02-07T14:21:43Z",
    "status": "OPEN",
    "topic": 49,
    "participants": [
      89,
      57,
      149,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 50,
  "fields": {
    "created": "2018-02-08T16:12:57.824Z",
    "modified": "2018-02-15T00:40:17.570Z",
    "time_start": "2018-02-07T18:32:47Z",
    "time_end": "2018-02-08T01:42:44Z",
    "status": "STALE",
    "topic": 50,
    "participants": [
      57,
      137,
      4
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 51,
  "fields": {
    "created": "2018-02-08T16:12:58.809Z",
    "modified": "2018-02-08T16:12:58.810Z",
    "time_start": "2018-02-08T15:00:44Z",
    "time_end": "2018-02-08T15:19:00Z",
    "status": "OPEN",
    "topic": 51,
    "participants": [
      57,
      137
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 52,
  "fields": {
    "created": "2018-02-08T16:12:59.413Z",
    "modified": "2018-02-08T16:12:59.414Z",
    "time_start": "2017-12-13T20:19:52Z",
    "time_end": "2017-12-13T22:00:52Z",
    "status": "OPEN",
    "topic": 52,
    "participants": [
      104,
      57,
      137
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 53,
  "fields": {
    "created": "2018-02-08T16:13:00.400Z",
    "modified": "2018-02-15T00:39:48.298Z",
    "time_start": "2017-12-15T22:06:16Z",
    "time_end": "2018-02-15T00:39:48.297Z",
    "status": "CLOSED",
    "topic": 53,
    "participants": [
      24,
      57,
      137,
      63
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 54,
  "fields": {
    "created": "2018-03-02T15:54:54.791Z",
    "modified": "2018-03-02T16:55:13.649Z",
    "time_start": "2018-03-02T15:54:54.791Z",
    "time_end": "2018-03-02T16:55:13.648Z",
    "status": "CLOSED",
    "topic": 54,
    "participants": [
      156,
      149
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 55,
  "fields": {
    "created": "2018-03-02T16:55:27.926Z",
    "modified": "2018-03-02T16:55:27.927Z",
    "time_start": "2018-03-02T16:55:27.926Z",
    "time_end": null,
    "status": "OPEN",
    "topic": 55,
    "participants": [
      156
    ]
  }
},
{
  "model": "topics.discussion",
  "pk": 56,
  "fields": {
    "created": "2018-03-02T18:00:07.736Z",
    "modified": "2018-03-02T18:00:07.736Z",
    "time_start": "2018-03-02T18:00:07.736Z",
    "time_end": null,
    "status": "OPEN",
    "topic": 56,
    "participants": [
      156
    ]
  }
}
]
